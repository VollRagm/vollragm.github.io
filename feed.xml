

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://vollragm.github.io/</id>
  <title>VollRagm</title>
  <subtitle>A blog regarding reverse engineering, game hacking and the Windows operating system</subtitle>
  <updated>2022-04-05T17:14:39+02:00</updated>
  <author>
    <name>VollRagm</name>
    <uri>https://vollragm.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://vollragm.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://vollragm.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator>
  <rights> © 2022 VollRagm </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Showing a MessageBox from kernel-mode</title>
    <link href="https://vollragm.github.io/posts/kernel-message-box/" rel="alternate" type="text/html" title="Showing a MessageBox from kernel-mode" />
    <published>2022-04-05T14:44:00+02:00</published>
  
    <updated>2022-04-05T16:51:57+02:00</updated>
  
    <id>https://vollragm.github.io/posts/kernel-message-box/</id>
    <content src="https://vollragm.github.io/posts/kernel-message-box/" />
    <author>
      <name>VollRagm</name>
    </author>

  
    
    <category term="Kernel Development" />
    
  

  
    <summary>
      





      Introduction
Message boxes provide a simple way to show feedback to the user. In user-mode, a message box can be shown with the MessageBoxW API function. However, this API does not exist in kernel-mode. One of the common ways to display info from kernel-mode is the DbgPrint API, which can be listened to from DbgView or an attached Kernel debugger. Recently I wanted to display a message box from...
    </summary>
  

  </entry>

  
  <entry>
    <title>Unity Engine reversing and hacking</title>
    <link href="https://vollragm.github.io/posts/unity-reversing/" rel="alternate" type="text/html" title="Unity Engine reversing and hacking" />
    <published>2022-04-04T23:41:00+02:00</published>
  
    <updated>2022-04-04T23:41:00+02:00</updated>
  
    <id>https://vollragm.github.io/posts/unity-reversing/</id>
    <content src="https://vollragm.github.io/posts/unity-reversing/" />
    <author>
      <name>VollRagm</name>
    </author>

  
    
    <category term="Reverse Engineering" />
    
  

  
    <summary>
      





      Introduction
Unity3D is a popular game engine used by many games, like Escape from Tarkov, Rust, Fall Guys, Among Us, and many more. The engine uses C# as scripting backend, and by default runs on top of the Mono Runtime. Since C# assemblies get compiled to MSIL, we can easily reverse engineer them using tools like dnSpy.
We are also able to easily inject our dependencies and even reference the...
    </summary>
  

  </entry>

  
  <entry>
    <title>Reverse Engineering Windows 7 Minesweeper</title>
    <link href="https://vollragm.github.io/posts/minesweeper/" rel="alternate" type="text/html" title="Reverse Engineering Windows 7 Minesweeper" />
    <published>2022-04-04T22:23:00+02:00</published>
  
    <updated>2022-04-04T22:23:00+02:00</updated>
  
    <id>https://vollragm.github.io/posts/minesweeper/</id>
    <content src="https://vollragm.github.io/posts/minesweeper/" />
    <author>
      <name>VollRagm</name>
    </author>

  
    
    <category term="Reverse Engineering" />
    
  

  
    <summary>
      





      Introduction

This blog post is about how to approach reverse engineering using the Windows 7 version of Minesweeper as an example. You can get the Windows 7 Minesweeper from https://win7games.com/.

I have created a trainer and a CheatEngine cheat table as well. You can find it here.

This post is written for beginners, however, I recommend having the following already:

  Basic understanding ...
    </summary>
  

  </entry>

  
  <entry>
    <title>Reverse engineering a Web API</title>
    <link href="https://vollragm.github.io/posts/web-api/" rel="alternate" type="text/html" title="Reverse engineering a Web API" />
    <published>2022-04-04T01:34:00+02:00</published>
  
    <updated>2022-04-04T01:34:00+02:00</updated>
  
    <id>https://vollragm.github.io/posts/web-api/</id>
    <content src="https://vollragm.github.io/posts/web-api/" />
    <author>
      <name>VollRagm</name>
    </author>

  
    
    <category term="Reverse Engineering" />
    
  

  
    <summary>
      





      Introduction
Most websites or web services have an API in the backend that delivers requested data to its frontend. This can be anything from the Google Search API to delivering a message on Discord.
Some people in the gaming community scan a game’s username database for certain available special names, like 3 letter names, to register them. I’ve been asked to write a tool to automate that. To ...
    </summary>
  

  </entry>

  
  <entry>
    <title>Reverse engineering Task Manager</title>
    <link href="https://vollragm.github.io/posts/task-manager/" rel="alternate" type="text/html" title="Reverse engineering Task Manager" />
    <published>2022-04-04T00:39:00+02:00</published>
  
    <updated>2022-04-04T00:39:00+02:00</updated>
  
    <id>https://vollragm.github.io/posts/task-manager/</id>
    <content src="https://vollragm.github.io/posts/task-manager/" />
    <author>
      <name>VollRagm</name>
    </author>

  
    
    <category term="Reverse Engineering" />
    
  

  
    <summary>
      





      Introduction
Some time ago I spent some time reversing Task Manager for fun and practice.
I will share my findings in this blog post. Note that most of the things in this post might not be interesting and only are here to assist beginners in getting the right mindset for reverse engineering.

The Performance Tab
At first, I took a look at the Performance tab, because it seemed like an obvious t...
    </summary>
  

  </entry>

</feed>


