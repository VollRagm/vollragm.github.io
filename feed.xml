

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://vollragm.github.io/</id>
  <title>VollRagm</title>
  <subtitle>A blog regarding reverse engineering, game hacking and the Windows operating system</subtitle>
  <updated>2022-06-01T16:50:22+02:00</updated>
  <author>
    <name>VollRagm</name>
    <uri>https://vollragm.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://vollragm.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://vollragm.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator>
  <rights> Â© 2022 VollRagm </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Abusing LargePageDrivers to copy shellcode into valid kernel modules</title>
    <link href="https://vollragm.github.io/posts/abusing-large-page-drivers/" rel="alternate" type="text/html" title="Abusing LargePageDrivers to copy shellcode into valid kernel modules" />
    <published>2022-04-10T23:26:00+02:00</published>
  
    <updated>2022-04-12T15:46:29+02:00</updated>
  
    <id>https://vollragm.github.io/posts/abusing-large-page-drivers/</id>
    <content src="https://vollragm.github.io/posts/abusing-large-page-drivers/" />
    <author>
      <name>VollRagm</name>
    </author>

  
    
    <category term="Kernel Development" />
    
  

  
    <summary>
      





      Introduction
Most people in the game hacking community write their kernel-mode drivers to get around kernel-level anti-cheats such as EasyAntiCheat.
However, those anti-cheats have several methods to detect cheat drivers. The most commonly used way to load the cheat driver is manually mapping it with tools like kdmapper. Unfortunately, manually mapping a driver in this way causes the code to be...
    </summary>
  

  </entry>

  
  <entry>
    <title>Showing a MessageBox from kernel-mode</title>
    <link href="https://vollragm.github.io/posts/kernel-message-box/" rel="alternate" type="text/html" title="Showing a MessageBox from kernel-mode" />
    <published>2022-04-05T14:44:00+02:00</published>
  
    <updated>2022-04-05T18:13:04+02:00</updated>
  
    <id>https://vollragm.github.io/posts/kernel-message-box/</id>
    <content src="https://vollragm.github.io/posts/kernel-message-box/" />
    <author>
      <name>VollRagm</name>
    </author>

  
    
    <category term="Kernel Development" />
    
  

  
    <summary>
      





      Introduction
Message boxes provide a simple way to show feedback to the user. In user-mode, a message box can be shown with the MessageBoxW API function. However, this API does not exist in kernel-mode. One of the common ways to display info from kernel-mode is the DbgPrint API, which can be listened to from DbgView or an attached Kernel debugger. Recently I wanted to display a message box from...
    </summary>
  

  </entry>

  
  <entry>
    <title>PTView - Browse Page Tables on Windows</title>
    <link href="https://vollragm.github.io/posts/ptview/" rel="alternate" type="text/html" title="PTView - Browse Page Tables on Windows" />
    <published>2022-04-04T23:58:00+02:00</published>
  
    <updated>2022-04-04T23:58:00+02:00</updated>
  
    <id>https://vollragm.github.io/posts/ptview/</id>
    <content src="https://vollragm.github.io/posts/ptview/" />
    <author>
      <name>VollRagm</name>
    </author>

  
    
    <category term="Kernel Development" />
    
  

  
    <summary>
      





      Introduction

Page Tables can be a complicated concept to understand.
This is why I created PTView. You can use this tool to visualize page tables and be able to browse them.

It allows you to inspect a Windows processes Page Tables live.
You can browse through them in a GUI and dump the physical pages they point to, as well as translate virtual to physical addresses and get the virtual address...
    </summary>
  

  </entry>

  
  <entry>
    <title>KernelSharp - Write Kernel Drivers in C#</title>
    <link href="https://vollragm.github.io/posts/kernelsharp/" rel="alternate" type="text/html" title="KernelSharp - Write Kernel Drivers in C#" />
    <published>2022-04-04T23:56:00+02:00</published>
  
    <updated>2022-04-04T23:56:00+02:00</updated>
  
    <id>https://vollragm.github.io/posts/kernelsharp/</id>
    <content src="https://vollragm.github.io/posts/kernelsharp/" />
    <author>
      <name>VollRagm</name>
    </author>

  
    
    <category term="Kernel Development" />
    
  

  
    <summary>
      





      Introduction
In the past, people asked me if it was possible to write a kernel-mode Driver for Windows in C#.
Now, you might be thinking that something like this would be totally foolish and serve no purpose.
Let me tell you one thing: You are totally right about that.
But after getting asked this question multiple times, I have decided to make it possible.

.NET in Kernel-mode?
There are sever...
    </summary>
  

  </entry>

  
  <entry>
    <title>Unity Engine reversing and hacking</title>
    <link href="https://vollragm.github.io/posts/unity-reversing/" rel="alternate" type="text/html" title="Unity Engine reversing and hacking" />
    <published>2022-04-04T23:41:00+02:00</published>
  
    <updated>2022-04-04T23:41:00+02:00</updated>
  
    <id>https://vollragm.github.io/posts/unity-reversing/</id>
    <content src="https://vollragm.github.io/posts/unity-reversing/" />
    <author>
      <name>VollRagm</name>
    </author>

  
    
    <category term="Reverse Engineering" />
    
  

  
    <summary>
      





      Introduction
Unity3D is a popular game engine used by many games, like Escape from Tarkov, Rust, Fall Guys, Among Us, and many more. The engine uses C# as scripting backend, and by default runs on top of the Mono Runtime. Since C# assemblies get compiled to MSIL, we can easily reverse engineer them using tools like dnSpy.
We are also able to easily inject our dependencies and even reference the...
    </summary>
  

  </entry>

</feed>


